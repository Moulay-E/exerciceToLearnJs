{
    "algorithme": [
        { 
            "algorithmeBubeSortId": "// JavaScript code here\nfunction bubbleSort(arr){\n    const n = arr.length;\n    let swapped;\n    do {\n        swapped = false; \n        let count = 0;\n        for(let i = 0; i < n-1 ; i++){\n            if(arr[i] > arr[i +1] ){\n                [arr[i], arr[i + 1] ] = [ arr[i+1], arr[i] ];\n                swapped = true;\n                console.log(swapped);\n                console.log(arr[i]);\n            }\n            count++;\n        }\n        console.log(count, \"count\");\n    } while(swapped);\n    console.log(arr, \"arr\");\n    return arr;\n}"
        },
        { 
            "algorithmeShowCodeId": "// LJavaScript code here\n\nfunction showData(e){\n    let l = document.getElementById(\"champChiffre\").value.split(\",\");\n    let o = [];\n    console.log(l);\n    for(let e = 0; e < l.length; e++){\n        o.push(parseFloat(l[e]));\n    }\n    console.log(o, \"before\");\n    bubbleSort(o);\n    result.innerHTML = o;\n}"
        }
    ],
    "string": [
        {
            "lengthFunctionId": "// JavaScript code here\n\nfunction stringLength(param){\n    let data = document.getElementById(\"stringSize\").value;\n    let textLength = data.length;\n    let textResult = document.getElementById(\"stringSizeResult\");\n    textResult.innerText = textLength;\n}"
        },
          
        {
            "findCharacterInStringFunctionId": "// JavaScript code here\n\nfunction findCharacterInString(){\n    let data = document.getElementById(\"characterInString\").value;\n    let charAt = data.charAt(1);\n    let charCodeAt = data.charCodeAt(1);\n    let at = data.at(1);\n    let propertyAccess = data[1];\n    let textResult = document.getElementById(\"characterInStringResult\");\n    textResult.innerHTML = `Tout est à l'index 1: <br> charAt: ${charAt} <br>\n        charCodeAt: ${charCodeAt}<br> at: ${at} <br> property access (imprévisible): ${propertyAccess}  ` ;\n}"
        }
        ,
        {
            "extractingStringPartFunctionId": "// JavaScript code here\n\nfunction extractingStringPart(){\n    let data = document.getElementById(\"extractStringPartId\").value;\n    let slice = data.slice(1,5);\n    let sliceNegative = data.slice(-5);\n    let subString = data.substring(1,5);\n    let substr = data.substr(1,5);\n    let textResult = document.getElementById(\"extractStringPartIdgResult\");\n    textResult.innerHTML = `index 1 au début et 5 fin: \n    <br> slice sans param s'arrête à la fin: ${slice} <br>\n    slice negative start a la fin: ${sliceNegative}\n    <br> substring (negative est traité comme 0): ${subString} \n    <br> substr, deuxième paramètre est la longueur de la chaîne, négatif comme slice: ${substr}  ` ;\n}"
        },
        {
            "upperAndLowerCaseFunctionId": "// JavaScript code here\n\nfunction upperAndLowerCase(){\n    const showResult = document.getElementById(\"upperAndLowerCaseIdgResult\");\n    const data = document.getElementById(\"upperAndLowerCaseValueId\").value;\n    let toUpper = data.toUpperCase();\n    let toLower = data.toLowerCase();\n    showResult.innerHTML = `En majuscule : ${toUpper} . </br>\n        En minuscule: ${toLower} . `;\n}"
        },
        {
            "allTrimMethodsFunctionId": "// JavaScript code here\n\nfunction allTrimMethods(){\n    const showResult = document.getElementById(\"allTrimMethodsIdResult\");\n    const data = document.getElementById(\"allTrimMethodsValueId\").value;\n    let textWithSpace = \"   voici un texte   \";\n    let addedSpace = textWithSpace.concat(\" \", data, \"  \");\n    let noSpaceAround = addedSpace.trim();\n    let noSpaceAtStart = addedSpace.trimStart();\n    let noSpaceAtEnd = addedSpace.trimEnd();\n    showResult.innerHTML = `Texte avec espace : ${addedSpace} . </br>\n        Sans espace autour: ${noSpaceAround}.</br>\n        Sans espace au début  : ${noSpaceAtStart}. </br>\n        Sans espace à la fin  : ${noSpaceAtEnd}.`;\n}"
        },
        {
            "allPadMethodsFunctionId": "// JavaScript code here\n\nfunction allPadMethods(){\n    const showResult = document.getElementById(\"allPadMethodsIdResult\");\n    const data = document.getElementById(\"allPadMethodsValueId\").value;\n    let text = \"text a afficher \";\n    let textPadStart = text.padStart(40, data);\n    let textPadEnd = text.padEnd(40, data);\n    showResult.innerHTML = `Texte de base : ${text} . </br>\n        Texte avec pad au début 40x: ${textPadStart}.</br>\n        Texte avec pad à la fin 40x  : ${textPadEnd}. </br>.`;\n}"
        },
        {
            "repeatStringFunctionId": "// JavaScript code here\n\nfunction repeatString(){\n    const showResult = document.getElementById(\"repeatStringIdResult\");\n    const data = document.getElementById(\"repeatStringValueId\").value;\n    let resultRepeat = data.repeat(5);\n    showResult.innerHTML = `Texte de base : ${data} . </br>\n        Texte répété 5x: ${resultRepeat}.</br>`;\n}"
        },
        {
            "replaceStringFunctionId": "// JavaScript code here\n\nfunction replaceString(){\n    const showResult = document.getElementById(\"repeatStringIdResult\");\n    const data = document.getElementById(\"repeatStringValueId\").value;\n    let baseText = \"Hello world of my world !\";\n    let resultCaseSensitive = baseText.replace(\"world\", data);\n    let resultCaseInsensitive = baseText.replace(/world/i, data);\n    let resultReplaceAllG = baseText.replace(/world/g, data);\n    let resultReplaceAll = baseText.replaceAll(\"world\", data);\n\n\n    showResult.innerHTML = `Texte de base : ${baseText} . </br>\n        Replace avec case sensible: ${resultCaseSensitive}.</br>\n        Replace avec case insensible: ${resultCaseInsensitive}.</br>\n        Replace all avec /g: ${resultReplaceAllG}.</br>\n        Replace all sans /g: ${resultReplaceAll}.</br>`;\n}"
        },
        {
            "splitStringFunctionId": "// JavaScript code here\n\nfunction splitString(){\n    const showResult = document.getElementById(\"splitStringIdResult\");\n    const data = document.getElementById(\"splitStringValueId\").value;\n    let splitOnSpace = data.split(\" \");\n    let splitOnCharacter = data.split(\"\");\n    let splitInFirstIndex = data.split();\n\n    let textsplitdOnCharacter = \"\";\n    for (let i = 0; i < splitOnCharacter.length; i++) {\n        textsplitdOnCharacter += splitOnCharacter[i] + \" \";\n    }\n    let textsplitdOnSpace = \"\";\n    for (let i = 0; i < splitOnSpace.length; i++) {\n        textsplitdOnSpace += splitOnSpace[i] + \" | \";\n    }\n    showResult.innerHTML = `Texte de base : ${data} . </br>\n        Texte au 1er index: ${splitInFirstIndex}.</br>\n        Texte coupé à chaque lettre: ${textsplitdOnCharacter}.</br>\n        Texte coupé à chaque espace: ${textsplitdOnSpace}.</br>`;\n}"
        }
    ],
    "stringSearch": [
        {}
    ]
}
