{
    "date":[
        {
            "title": "Date New Date",
            "subtitle": "Date objects are created with the new Date() constructor. </br> There are 9 ways to create a new date object:",
            "paragraph":"new Date() </br>new Date(date string) </br> ew Date(year,month) </br> And after that you can add value you want or let it blank it will complete automatically. </br> new Date(year,month,day,hours,minutes,seconds,ms). In this example you can see the date current date:",
            "inputValueId": "dateNewDateValueId",
            "onclickFonctionToCall": "dateNewDate",
            "outputResultId": "dateNewDateIdResult",
            "idToMarkCodeArea": "dateNewDateFunctionId"
        },
        {
            "title": "Date New Date(string)",
            "subtitle": "new Date(date string) creates a date object from a date string: September 5, 2016",
            "paragraph":"",
            "inputValueId": "dateNewDateStringValueId",
            "onclickFonctionToCall": "dateNewDateString",
            "outputResultId": "dateNewDateStringIdResult",
            "idToMarkCodeArea": "dateNewDateStringFunctionId"
        },
        {
            "title": "Date New Date(number)",
            "subtitle": "new Date(year, month, ...) creates a date object with a specified date and time.",
            "paragraph":"",
            "inputValueId": "dateNewDateNumberValueId",
            "onclickFonctionToCall": "dateNewDateNumber",
            "outputResultId": "dateNewDateNumberIdResult",
            "idToMarkCodeArea": "dateNewDateNumberFunctionId"
        }
    ],
    "dateFormat":[
        {
            "title": "JavaScript ISO Dates",
            "subtitle": "ISO 8601 is the international standard for the representation of dates and times. The syntax is: (YYYY-MM-DD).",
            "paragraph":"is also the preferred JavaScript date format, type a year like this example: 2015-03-25 ",
            "inputValueId": "isoDateValueId",
            "onclickFonctionToCall": "isoDate",
            "outputResultId": "isoDateIdResult",
            "idToMarkCodeArea": "isoDateFunctionId"
        },
        {
            "title": "ISO Dates (Year and Month)",
            "subtitle": "ISO dates can be written without specifying the day (YYYY-MM):",
            "paragraph":"type a year like this example: 2015-03:",
            "inputValueId": "isoDateYearMonthValueId",
            "onclickFonctionToCall": "isoDateYearMonth",
            "outputResultId": "isoDateYearMonthIdResult",
            "idToMarkCodeArea": "isoDateYearMonthFunctionId"
        },
        {
            "title": "ISO Dates (Only Year)",
            "subtitle": "ISO dates can be written without month and day (YYYY):",
            "paragraph":"type a year like this example: 2015:",
            "inputValueId": "isoDateYearValueId",
            "onclickFonctionToCall": "isoDateYear",
            "outputResultId": "isoDateYearIdResult",
            "idToMarkCodeArea": "isoDateYearFunctionId"
        },
        {
            "title": "ISO Dates (Date-Time)",
            "subtitle": "ISO dates can be written with added hours, minutes, and seconds (YYYY-MM-DDTHH:MM:SSZ):",
            "paragraph":"The example will be: 2015-03-25T12:00:00Z. </br> (Separate date and time with a capital T.Indicate UTC time with a capital Z.)",
            "inputValueId": "isoDateHourMinuteSecondValueId",
            "onclickFonctionToCall": "isoDateHourMinuteSecond",
            "outputResultId": "isoDateHourMinuteSecondIdResult",
            "idToMarkCodeArea": "isoDateHourMinuteSecondFunctionId"
        },
        {
            "title": "JavaScript Short Dates.",
            "subtitle": "Short dates are written with an \"MM/DD/YYYY\" syntax like this:",
            "paragraph":"The example will be: 03/25/2015. </br> (WARNINGS ! In some browsers, months or days with no leading zeroes may produce an error, you have to write:2015-3-25)",
            "inputValueId": "shortDateValueId",
            "onclickFonctionToCall": "shortDate",
            "outputResultId": "shortDateIdResult",
            "idToMarkCodeArea": "shortDateFunctionId"
        },
        {
            "title": "JavaScript Long Dates.",
            "subtitle": "ong dates are most often written with a \"MMM DD YYYY\" syntax like this:",
            "paragraph":"The example will be: 03/25/2015. </br> (WARNINGS ! In some browsers, months or days with no leading zeroes may produce an error, you have to write:2015-3-25)",
            "inputValueId": "longDateValueId",
            "onclickFonctionToCall": "longDate",
            "outputResultId": "longDateIdResult",
            "idToMarkCodeArea": "longDateFunctionId"
        },
        {
            "title": "JavaScript Parsing Dates.",
            "subtitle": "If you have a valid date string, you can use the Date.parse() method to convert it to milliseconds.",
            "paragraph":" Date.parse() returns the number of milliseconds between the date and January 1, 1970. <br> Then use the number of milliseconds to convert it to a date object. <br> In this example we use : \"March 21, 2012\". ",
            "inputValueId": "parsingDateValueId",
            "onclickFonctionToCall": "parsingDate",
            "outputResultId": "parsingDateIdResult",
            "idToMarkCodeArea": "parsingDateFunctionId"
        }
    ],
    "dateGetMethods":[
        {
            "title": "The new Date() Constructor",
            "subtitle": "In JavaScript, date objects are created with new Date().",
            "paragraph":"new Date() returns a date object with the current date and time. <br> Type the date  you want, example: 2015-03-25 ",
            "inputValueId": "newDateConstructorValueId",
            "onclickFonctionToCall": "newDateConstructor",
            "outputResultId": "newDateConstructorIdResult",
            "idToMarkCodeArea": "newDateConstructorFunctionId"
        },
        {
            "title": "The new Date() Constructor",
            "subtitle": "The getFullYear() method returns the year of a date as a four digit number:",
            "paragraph":"In this example it will be  current date.",
            "inputValueId": "getFullYearValueId",
            "onclickFonctionToCall": "getFullYear",
            "outputResultId": "getFullYearIdResult",
            "idToMarkCodeArea": "getFullYearFunctionId"
        },
        {
            "title": "The getMonth() Method",
            "subtitle": "The getMonth() method returns the month of a date as a number (0-11). ",
            "paragraph":"In this example it will be  current date. <br> So you need to increase it by one.",
            "inputValueId": "getMonthValueId",
            "onclickFonctionToCall": "getMonth",
            "outputResultId": "getMonthIdResult",
            "idToMarkCodeArea": "getMonthFunctionId"
        },
        {
            "title": "The getDate() Method",
            "subtitle": "The getDate() method returns the day of a date as a number (1-31).",
            "paragraph":"In this example it will be  current date.",
            "inputValueId": "dateGetDateValueId",
            "onclickFonctionToCall": "dateGetDate",
            "outputResultId": "dateGetDateIdResult",
            "idToMarkCodeArea": "dateGetDateFunctionId"
        },
        {
            "title": "The getHour() Method",
            "subtitle": "The getHours() method returns the hours of a date as a number (0-23).",
            "paragraph":"In this example it will be  current date.",
            "inputValueId": "dateGetHourValueId",
            "onclickFonctionToCall": "dateGetHour",
            "outputResultId": "dateGetHourIdResult",
            "idToMarkCodeArea": "dateGetHourFunctionId"
        },
        {
            "title": "The getMinutes() Method",
            "subtitle": "The getMinutes() method returns the minutes of a date as a number (0-59).",
            "paragraph":"In this example it will be  current date and minutes.",
            "inputValueId": "dateGetMinuteValueId",
            "onclickFonctionToCall": "dateGetMinute",
            "outputResultId": "dateGetMinuteIdResult",
            "idToMarkCodeArea": "dateGetMinuteFunctionId"
        },
        {
            "title": "The getSeconds() Method",
            "subtitle": "The getSeconds() method returns the seconds of a date as a number (0-59).",
            "paragraph":"In this example it will be  current date.",
            "inputValueId": "dateGetsecondsValueId",
            "onclickFonctionToCall": "dateGetseconds",
            "outputResultId": "dateGetsecondsIdResult",
            "idToMarkCodeArea": "dateGetsecondsFunctionId"
        },
        {
            "title": "The getMilliseconds() Method",
            "subtitle": "The getMilliseconds() method returns the milliseconds of a date as a number (0-999).",
            "paragraph":"In this example it will be current date.",
            "inputValueId": "dateGetMillisecondsValueId",
            "onclickFonctionToCall": "dateGetMilliseconds",
            "outputResultId": "dateGetMillisecondsIdResult",
            "idToMarkCodeArea": "dateGetMillisecondsFunctionId"
        },
        {
            "title": "The getDay() Method",
            "subtitle": "The getDay() method returns the weekday of a date as a number (0-6).",
            "paragraph":"In this example it will be current date.",
            "inputValueId": "dateGetdayValueId",
            "onclickFonctionToCall": "dateGetday",
            "outputResultId": "dateGetdayIdResult",
            "idToMarkCodeArea": "dateGetdayFunctionId"
        },
        {
            "title": "The getTime() Method",
            "subtitle": "The getTime() & Date.now() method returns the number of milliseconds since January 1, 1970:",
            "paragraph":"In this example, we will use it to compare from the millisecond of the current minute and hour, and the year since 1970:",
            "inputValueId": "dateGetTimeValueId",
            "onclickFonctionToCall": "dateGetTime",
            "outputResultId": "dateGetTimeIdResult",
            "idToMarkCodeArea": "dateGetTimeFunctionId"
        },
        {
            "title": "The getTimezoneOffset() Method",
            "subtitle": "The getTimezoneOffset() method returns the difference (in minutes) between local time an UTC time (Universal time coordinated):",
            "paragraph":"We will convert it in hour to see the difference.",
            "inputValueId": "dateGetTimeZoneValueId",
            "onclickFonctionToCall": "dateGetTimeZone",
            "outputResultId": "dateGetTimeZoneIdResult",
            "idToMarkCodeArea": "dateGetTimeZoneFunctionId"
        }
    ],
    "dateSetMethods":[
        {
            "title": "The new Date() Constructor",
            "subtitle": "In JavaScript, date objects are created with new Date().",
            "paragraph":"new Date() returns a date object with the current date and time. <br> Type the date  you want, example: 2015-03-25 ",
            "inputValueId": "newDateConstructorValueId",
            "onclickFonctionToCall": "newDateConstructor",
            "outputResultId": "newDateConstructorIdResult",
            "idToMarkCodeArea": "newDateConstructorFunctionId"
        }
    ]
}