{
    "numbers":[
        {
            "title": "The numberNaN Method",
            "subtitle": "NaN is a JavaScript reserved word for a number that is not a legal number.",
            "paragraph":"Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number). In this example we multiply it with your number.(Obviously it's stay infinite)",
            "inputValueId": "numberNaNValueId",
            "onclickFonctionToCall": "numberNaN",
            "outputResultId": "numberNaNIdResult",
            "idToMarkCodeArea": "numberNaNFunctionId"
        }
    ],
    "numberMethods":[
        {
            "title": "The numberToString Method",
            "subtitle": "The toString() method returns a number as a string.",
            "paragraph":"All number methods can be used on any type of numbers (literals, variables, or expressions):",
            "inputValueId": "numberToStringValueId",
            "onclickFonctionToCall": "numberToString",
            "outputResultId": "numberToStringIdResult",
            "idToMarkCodeArea": "numberToStringFunctionId"
        },
        {
            "title": "The numberToExponential Method",
            "subtitle": "toExponential() returns a string, with a number rounded and written using exponential notation.",
            "paragraph":"A parameter defines the number of characters behind the decimal point:",
            "inputValueId": "numberToExponentialValueId",
            "onclickFonctionToCall": "numberToExponential",
            "outputResultId": "numberToExponentialIdResult",
            "idToMarkCodeArea": "numberToExponentialFunctionId"
        },
        {
            "title": "The numberToFixed Method",
            "subtitle": "",
            "paragraph":"toFixed() returns a string, with the number written with a specified number of decimals, the last decimal is rounded. In this example the number is : 555555.5555555555, you can choice how many number to show:",
            "inputValueId": "numberToFixedValueId",
            "onclickFonctionToCall": "numberToFixed",
            "outputResultId": "numberToFixedIdResult",
            "idToMarkCodeArea": "numberToFixedFunctionId"
        },
        {
            "title": "The numberToPrecision Method",
            "subtitle": "",
            "paragraph":"toPrecision() returns a string, with a number written with a specified length. In this example the number is : 555555.5555555555, you can choice how many number to show: ",
            "inputValueId": "numberToPrecisionValueId",
            "onclickFonctionToCall": "numberToPrecision",
            "outputResultId": "numberToPrecisionIdResult",
            "idToMarkCodeArea": "numberToPrecisionFunctionId"
        },
        {
            "title": "The numberTheValueOf Method",
            "subtitle": "",
            "paragraph":"valueOf() returns a number as a number.",
            "inputValueId": "numberTheValueOfValueId",
            "onclickFonctionToCall": "numberTheValueOf",
            "outputResultId": "numberTheValueOfIdResult",
            "idToMarkCodeArea": "numberTheValueOfFunctionId"
        },
        {
            "title": "The numberNumber Method",
            "subtitle": "The Number() method can be used to convert JavaScript variables to numbers:",
            "paragraph":"Can be use on number and boolean or date. Dont work on other primitve",
            "inputValueId": "numberNumberValueId",
            "onclickFonctionToCall": "numberNumber",
            "outputResultId": "numberNumberIdResult",
            "idToMarkCodeArea": "numberNumberFunctionId"
        },
        {
            "title": "The numberParseInt Method",
            "subtitle": "Use Number.parseInt for modern coding conventions. Parse int does not count after the decimal point and can take a second argument called radix, for hexadecimaux ect...",
            "paragraph":"parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:",
            "inputValueId": "numberParseIntValueId",
            "onclickFonctionToCall": "numberParseInt",
            "outputResultId": "numberParseIntIdResult",
            "idToMarkCodeArea": "numberParseIntFunctionId"
        },
        {
            "title": "The numberParseFloat Method",
            "subtitle": "Use Number.parseFloat for modern coding conventions. Parse float it reads the whole string and displays the numbers even after the decimal point",
            "paragraph":"parseFloat() parses a string and returns a number. Spaces are allowed. Only the first number is returned:",
            "inputValueId": "numberParseFloatValueId",
            "onclickFonctionToCall": "numberParseFloat",
            "outputResultId": "numberParseFloatIdResult",
            "idToMarkCodeArea": "numberParseFloatFunctionId"
        },
        {
            "title": "The numberIsInteger Method",
            "subtitle": "Can take number only",
            "paragraph":"The Number.isInteger() method returns true if the argument is an integer.",
            "inputValueId": "numberIsIntegerValueId",
            "onclickFonctionToCall": "numberIsInteger",
            "outputResultId": "numberIsIntegerIdResult",
            "idToMarkCodeArea": "numberIsIntegerFunctionId"
        },
        {
            "title": "The numberIsSafeInteger Method",
            "subtitle": "Can take number only, safe integers are all integers from -(253 - 1) to +(253 - 1).",
            "paragraph":"A safe integer is an integer that can be exactly represented as a double precision number.</br> The Number.isSafeInteger() method returns true if the argument is a safe integer.",
            "inputValueId": "numberIsSafeIntegerValueId",
            "onclickFonctionToCall": "numberIsSafeInteger",
            "outputResultId": "numberIsSafeIntegerIdResult",
            "idToMarkCodeArea": "numberIsSafeIntegerFunctionId"
        },
        {
            "title": "The numberNumberParseFloat Method",
            "subtitle": "Can take number only, safe integers are all integers from -(253 - 1) to +(253 - 1).",
            "paragraph":"A safe integer is an integer that can be exactly represented as a double precision number.</br> The Number.isSafeInteger() method returns true if the argument is a safe integer.",
            "inputValueId": "numberNumberParseFloatValueId",
            "onclickFonctionToCall": "numberNumberParseFloat",
            "outputResultId": "numberNumberParseFloatIdResult",
            "idToMarkCodeArea": "numberNumberParseFloatFunctionId"
        }
    ],
    "numberProperties":[
        {
            "title": "The numberEpsilon Method",
            "subtitle": "Number.EPSILON is the difference between the smallest floating point number greater than 1 and 1.",
            "paragraph":"In this example try add 0.3 to 0.2,and substract the same number, this will be a infinidecimal rest. With EPSILON, we can calculate if it'smaller than him(usefful in complex calculation)",
            "inputValueId": "numberEpsilonValueId",
            "onclickFonctionToCall": "numberEpsilon",
            "outputResultId": "numberEpsilonIdResult",
            "idToMarkCodeArea": "numberEpsilonFunctionId"
        },
        {
            "title": "The numberMaxValue Method",
            "subtitle": "Number.MAX_VALUE is a constant representing the largest possible number in JavaScript.Can only be used with: Number.",
            "paragraph":"In this example with just add number to the numberMax_value, if the value is big enough it will be infinity.",
            "inputValueId": "numberMaxValueValueId",
            "onclickFonctionToCall": "numberMaxValue",
            "outputResultId": "numberMaxValueIdResult",
            "idToMarkCodeArea": "numberMaxValueFunctionId"
        },
        {
            "title": "The numberMinValue Method",
            "subtitle": "Number.MIN_VALUE is a constant representing the lowest possible number in JavaScript.",
            "paragraph":"In this example we substract it with your number.",
            "inputValueId": "numberMinValueValueId",
            "onclickFonctionToCall": "numberMinValue",
            "outputResultId": "numberMinValueIdResult",
            "idToMarkCodeArea": "numberMinValueFunctionId"
        },
        {
            "title": "The numberMaxSafeInteger Method",
            "subtitle": "Number.MAX_SAFE_INTEGER represents the maximum safe integer in JavaScript. In this example we multiply it with your number.",
            "paragraph":"Number.MAX_SAFE_INTEGER is (253 - 1).",
            "inputValueId": "numberMaxSafeIntegerValueId",
            "onclickFonctionToCall": "numberMaxSafeInteger",
            "outputResultId": "numberMaxSafeIntegerIdResult",
            "idToMarkCodeArea": "numberMaxSafeIntegerFunctionId"
        },
        {
            "title": "The numberMinSafeInteger Method",
            "subtitle": "Number.MIN_SAFE_INTEGER represents the minimum safe integer in JavaScript., (REMINDER : Number properties belong to the JavaScript Number Object)",
            "paragraph":"Number.MIN_SAFE_INTEGER is -(253 - 1). In this example we multiply it with your number.",
            "inputValueId": "numberMinSafeIntegerValueId",
            "onclickFonctionToCall": "numberMinSafeInteger",
            "outputResultId": "numberMinSafeIntegerIdResult",
            "idToMarkCodeArea": "numberMinSafeIntegerFunctionId"
        },
        {
            "title": "The numberPositiveInfinity Method",
            "subtitle": "",
            "paragraph":"In this example we multiply it with your number.(Obviously it's stay infinite)",
            "inputValueId": "numberPositiveInfinityValueId",
            "onclickFonctionToCall": "numberPositiveInfinity",
            "outputResultId": "numberPositiveInfinityIdResult",
            "idToMarkCodeArea": "numberPositiveInfinityFunctionId"
        },
        {
            "title": "The numberNegativeInfinity Method",
            "subtitle": "",
            "paragraph":"In this example we multiply it with your number.(Obviously it's stay infinite)",
            "inputValueId": "numberNegativeInfinityValueId",
            "onclickFonctionToCall": "numberNegativeInfinity",
            "outputResultId": "numberNegativeInfinityIdResult",
            "idToMarkCodeArea": "numberNegativeInfinityFunctionId"
        },
        {
            "title": "The numberNaN Method",
            "subtitle": "NaN is a JavaScript reserved word for a number that is not a legal number.",
            "paragraph":"Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number). In this example we multiply it with your number.(Obviously it's stay indefine)",
            "inputValueId": "numberNaNValueId",
            "onclickFonctionToCall": "numberNaN",
            "outputResultId": "numberNaNIdResult",
            "idToMarkCodeArea": "numberNaNFunctionId"
        }
    ]
}