{
    "array":[
        {
            "title": "Create a array",
            "subtitle": "",
            "paragraph":"An array is a special variable, which can hold more than one value:",
            "inputValueId": "arrayCreateValueId",
            "onclickFonctionToCall": "arrayCreate",
            "outputResultId": "arrayCreateIdResult",
            "idToMarkCodeArea": "arrayCreateFunctionId"
        },
        {
            "title": "Using the JavaScript Keyword new",
            "subtitle": "",
            "paragraph":"The following example also creates an Array with the keyword new, and assigns values to it:",
            "inputValueId": "arrayNewValueId",
            "onclickFonctionToCall": "arrarrayNewayCreate",
            "outputResultId": "arrayNewIdResult",
            "idToMarkCodeArea": "arrayNewFunctionId"
        }

    ],
    "arrayMethods":[
        {
            "title": "Array length",
            "subtitle": "",
            "paragraph":"The length property returns the length (size) of an array:",
            "inputValueId": "arrMethodsLengthValueId",
            "onclickFonctionToCall": "arrMethodsLength",
            "outputResultId": "arrMethodsLengthIdResult",
            "idToMarkCodeArea": "arrMethodsLengthFunctionId"
        },
        {
            "title": "Array toString",
            "subtitle": "",
            "paragraph":"The JavaScript method toString() converts an array to a string of (comma separated) array values.",
            "inputValueId": "arrMethodsToStringValueId",
            "onclickFonctionToCall": "arrMethodsToString",
            "outputResultId": "arrMethodsToStringIdResult",
            "idToMarkCodeArea": "arrMethodsToStringFunctionId"
        },
        {
            "title": "Array join",
            "subtitle": "The join() method also joins all array elements into a string.",
            "paragraph":"The join(\"test\") method combines the array elements into a single string, inserting the \"test\" parameter between each element.Type the element you want to remplace \"test\" in the arr: [cacao, banane, lait, vanille]",
            "inputValueId": "arrMethodsJoinValueId",
            "onclickFonctionToCall": "arrMethodsJoin",
            "outputResultId": "arrMethodsJoinIdResult",
            "idToMarkCodeArea": "arrMethodsJoinFunctionId"
        },
        {
            "title": "Array pop",
            "subtitle": "The pop() method removes the last element from an array:",
            "paragraph":" The arr: [cacao, banane, lait, vanille]",
            "hiddenInput": "true",
            "inputValueId": "arrMethodsPopValueId",
            "onclickFonctionToCall": "arrMethodsPop",
            "outputResultId": "arrMethodsPopIdResult",
            "idToMarkCodeArea": "arrMethodsPopFunctionId"
        },
        {
            "title": "Array push",
            "subtitle": "",
            "hiddenInput": "true",
            "paragraph":"The push() method adds a new element to an array (at the end): The arr: [cacao, banane, lait, vanille]",
            "inputValueId": "arrMethodsPushValueId",
            "onclickFonctionToCall": "arrMethodsPush",
            "outputResultId": "arrMethodsPushIdResult",
            "idToMarkCodeArea": "arrMethodsPushFunctionId"
        },
        {
            "title": "Array shift",
            "subtitle": "",
            "paragraph":"The shift() method removes the first array element and 'shifts' all other elements to a lower index. The arr: [cacao, banane, lait, vanille] .",
            "hiddenInput": "true",
            "inputValueId": "arrMethodsShiftValueId",
            "onclickFonctionToCall": "arrMethodsShift",
            "outputResultId": "arrMethodsShiftIdResult",
            "idToMarkCodeArea": "arrMethodsShiftFunctionId"
        },
        {
            "title": "Array unshift",
            "subtitle": "The unshift() method adds a new or multiples elements to an array (at the beginning), and 'unshifts' older elements:",
            "paragraph":"Type the element to add:",
            "inputValueId": "arrMethodsUnShiftValueId",
            "onclickFonctionToCall": "arrMethodsUnShift",
            "outputResultId": "arrMethodsUnShiftIdResult",
            "idToMarkCodeArea": "arrMethodsUnShiftFunctionId"
        },
        {
            "title": "Array concat",
            "subtitle": "The concat() method does not change the existing arrays, it's concant 2 array in one. It always returns a new array and can take any number of arr arguments.",
            "paragraph":"Type  element to create a new array and concat to the arr: [cacao, banane, lait, vanille] .",
            "inputValueId": "arrMethodsConcatValueId",
            "onclickFonctionToCall": "arrMethodsConcat",
            "outputResultId": "arrMethodsConcatIdResult",
            "idToMarkCodeArea": "arrMethodsConcatFunctionId"
        },
        {
            "title": "Array copyWithin",
            "subtitle": "The copyWithin() method copies array elements to another position in an array, can take as second argument the length of the copy.",
            "paragraph":"Type the number(only one number) to chose to copy(contained in the arr length not the index), the index of the copy is : 0. The arr: [cacao, banane, lait, vanille]:",
            "inputValueId": "arrMethodscopyWithinValueId",
            "onclickFonctionToCall": "arrMethodscopyWithin",
            "outputResultId": "arrMethodscopyWithinIdResult",
            "idToMarkCodeArea": "arrMethodscopyWithinFunctionId"
        },
        {
            "title": "Array flat",
            "subtitle": "The flat() method creates a new array with sub-array elements concatenated to a specified depth.(change multiple arr into one, at one level)",
            "paragraph":"The arr: [cacao, [banane, lait], vanille]:",
            "hiddenInput": "true",
            "inputValueId": "arrMethodArrayflatValueId",
            "onclickFonctionToCall": "arrMethodArrayflat",
            "outputResultId": "arrMethodArrayflatIdResult",
            "idToMarkCodeArea": "arrMethodArrayflatFunctionId"
        },
        {
            "title": "Array splice",
            "subtitle": "The splice() method can be used to add new items to an array or remove them (modify the original array), can be used to remove element without holes.",
            "paragraph":"The first parameter (2) defines the position where new elements should be added and the second how many element to remove. The rest of parameter define the element to add, if empty it's just remove element. </br> Type the element to add:",
            "inputValueId": "arrMethodsSpliceValueId",
            "onclickFonctionToCall": "arrMethodsSplice",
            "outputResultId": "arrMethodsSpliceIdResult",
            "idToMarkCodeArea": "arrMethodsSpliceFunctionId"
        },
        {
            "title": "Array Array toSpliced",
            "subtitle": "ES2023 added the Array toSpliced() method as a safe way to splice an array without altering the original array.",
            "paragraph":"Same ad splice() but create a new array, and don't save the data removed like splice(). Keeping the original array unchanged",
            "inputValueId": "arrMethodsToSplicedValueId",
            "onclickFonctionToCall": "arrMethodsToSpliced",
            "outputResultId": "arrMethodsToSplicedIdResult",
            "idToMarkCodeArea": "arrMethodsToSplicedFunctionId"
        },
        {
            "title": "Array slice",
            "subtitle": "The slice() method slices out a piece of an array into a new array:",
            "paragraph":"The slice() method can take two arguments, the start argument, and up to (but not including) the end argument.</br> The arr: [cacao, banane, lait, vanille]:",
            "inputValueId": "arrMethodsSliceValueId",
            "onclickFonctionToCall": "arrMethodsSlice",
            "outputResultId": "arrMethodsSliceIdResult",
            "idToMarkCodeArea": "arrMethodsSliceFunctionId"
        }

    ],
    "arraySearchMethods": [
        {
            "title": "Array indexOf",
            "subtitle": "The indexOf() method searches an array for an element value and returns its position.",
            "paragraph":"Type the element you want to find the index in this array: [Apple, Orange, Apple, Mango]. </br> (Good to know: array.indexOf(item, start)).",
            "inputValueId": "arrMethodsIndexOfValueId",
            "onclickFonctionToCall": "arrMethodsIndexOf",
            "outputResultId": "arrMethodsIndexOfIdResult",
            "idToMarkCodeArea": "arrMethodsIndexOfFunctionId"
        },
        {
            "title": "Array lastIndexOf",
            "subtitle": "Array.lastIndexOf() is the same as Array.indexOf(), but returns the position of the last occurrence of the specified element.",
            "paragraph":"Type the element you want to find the index in this array: [Apple, Orange, Apple, Mango, Orange]. </br> (Good to know: array.lastIndexOf(item, start)).",
            "inputValueId": "arrMethodslastIndexOfValueId",
            "onclickFonctionToCall": "arrMethodslastIndexOf",
            "outputResultId": "arrMethodslastIndexOfIdResult",
            "idToMarkCodeArea": "arrMethodslastIndexOfFunctionId"
        },
        {
            "title": "Array includes",
            "subtitle": "ECMAScript 2016 introduced Array.includes() to arrays. This allows us to check if an element is present in an array (including NaN, unlike indexOf).",
            "paragraph":"Type the element you want to find and you will know if it present: [Apple, Orange, Apple, Mango, Orange]. </br> (Good to know: array.lastIndexOf(item, start)).",
            "inputValueId": "arrMethodsIncludesValueId",
            "onclickFonctionToCall": "arrMethodsIncludes",
            "outputResultId": "arrMethodsIncludesIdResult",
            "idToMarkCodeArea": "arrMethodsIncludesFunctionId"
        },
        {
            "title": "Array find",
            "subtitle": "The find() method returns the value of the first array element that passes a test function.",
            "paragraph":"In this example we search for a numbers greater than the specified number. This is the array: [4, 9, 16, 25, 29]. </br> (Good to know: this function can take 3 argument(value, index, array)). ",
            "inputValueId": "arrMethodsFindValueId",
            "onclickFonctionToCall": "arrMethodsFind",
            "outputResultId": "arrMethodsFindIdResult",
            "idToMarkCodeArea": "arrMethodsFindFunctionId"
        },
        {
            "title": "Array findIndex",
            "subtitle": "The findIndex() method returns the index of the first array element that passes a test function.",
            "paragraph":"In this example we search for index of a numbers greater than the specified number. This is the array: [4, 9, 16, 25, 29]. </br> (Good to know: this function can take 3 argument(value, index, array)). ",
            "inputValueId": "arrMethodsfindIndexValueId",
            "onclickFonctionToCall": "arrMethodsfindIndex",
            "outputResultId": "arrMethodsfindIndexIdResult",
            "idToMarkCodeArea": "arrMethodsfindIndexFunctionId"
        },
        {
            "title": "Array findLast",
            "subtitle": "ES2023 added the findLast() method that will start from the end of an array and return the value of the first element that satisfies a condition.",
            "paragraph":"In this example we search a numbers greater than the specified number. This is the array: [27, 28, 30, 40, 42, 35, 30]. </br> (Good to know: this function can take 3 argument(value, index, array)). ",
            "inputValueId": "arrMethodsindLastValueId",
            "onclickFonctionToCall": "arrMethodsindLast",
            "outputResultId": "arrMethodsindLastIdResult",
            "idToMarkCodeArea": "arrMethodsindLastFunctionId"
        },
        {
            "title": "Array indLastIndex",
            "subtitle": "ES2023 added the findLast() method that will start from the end of an array and return the value of the first element that satisfies a condition.",
            "paragraph":"In this example we search for index of a numbers greater than the specified number. This is the array: [27, 28, 30, 40, 42, 35, 30]. </br> (Good to know: this function can take 3 argument(value, index, array)). ",
            "inputValueId": "arrMethodsindLastIndexValueId",
            "onclickFonctionToCall": "arrMethodsindLastIndex",
            "outputResultId": "arrMethodsindLastIndexIdResult",
            "idToMarkCodeArea": "arrMethodsindLastIndexFunctionId"
        }
    ],
    "arraySortMethods": [
        {
            "title": "Array Sort",
            "subtitle": "The sort() method sorts an array alphabetically:",
            "paragraph":"Type the element you want to add to the array and be sorted. The array is: [Apple, Orange, Apple, Mango, Orange].",
            "inputValueId": "arrMethodsSortValueId",
            "onclickFonctionToCall": "arrMethodsSort",
            "outputResultId": "arrMethodsSortIdResult",
            "idToMarkCodeArea": "arrMethodsSortFunctionId"
        },
        {
            "title": "Array Reverse",
            "subtitle": "The sort() method sorts an array alphabetically:",
            "paragraph":"Type the element you want to add to the array and the array will be reverse. The array is: [Apple, Orange, Apple, Mango, Orange].",
            "inputValueId": "arrMethodsReverseValueId",
            "onclickFonctionToCall": "arrMethodsReverse",
            "outputResultId": "arrMethodsReverseIdResult",
            "idToMarkCodeArea": "arrMethodsReverseFunctionId"
        },
        {
            "title": "Array toReversed",
            "subtitle": "The difference between toReversed() and reverse() is that the first method creates a new array, keeping the original array unchanged, while the last method alters the original array.",
            "paragraph":"Type the element you want to add to the array and the array will be reverse. The array is: [Apple, Orange, Apple, Mango, Orange].",
            "inputValueId": "arrMethodsToReversedValueId",
            "onclickFonctionToCall": "arrMethodsToReversed",
            "outputResultId": "arrMethodsToReversedIdResult",
            "idToMarkCodeArea": "arrMethodsToReversedFunctionId"
        },
        {
            "title": "Array Numeric sort",
            "subtitle": "By default, the sort() function sorts values as strings.This works well for strings (\"Apple\" comes before \"Banana\"). ",
            "paragraph":"If numbers are sorted as strings, \"25\" is bigger than \"100\", because \"2\" is bigger than \"1\". Because of this, the sort() method will produce incorrect result when sorting numbers. You can fix this by providing a compare function:",
            "hiddenInput": "true",
            "inputValueId": "arrMethodsNumericSortValueId",
            "onclickFonctionToCall": "arrMethodsNumericSort",
            "outputResultId": "arrMethodsNumericSortIdResult",
            "idToMarkCodeArea": "arrMethodsNumericSortFunctionId"
        },
        {
            "title": "Array random order",
            "subtitle": "Using a sort function, like explained above, you can sort an numeric array in random order",
            "paragraph":"The array is : [40, 100, 1, 5, 25, 10].",
            "hiddenInput": "true",
            "inputValueId": "arrMethodsRandomOrderValueId",
            "onclickFonctionToCall": "arrMethodsRandomOrder",
            "outputResultId": "arrMethodsRandomOrderIdResult",
            "idToMarkCodeArea": "arrMethodsRandomOrderFunctionId"
        },
        {
            "title": "Array MathMin MathMax",
            "subtitle": " Using Math.max() & Math.min() on an Array",
            "paragraph":"You can use it the find the min and max value. The array is : [40, 100, 1, 5, 25, 10].",
            "hiddenInput": "true",
            "inputValueId": "arrMethodsMathMinMaxValueId",
            "onclickFonctionToCall": "arrMethodsMathMinMax",
            "outputResultId": "arrMethodsMathMinMaxIdResult",
            "idToMarkCodeArea": "arrMethodsMathMinMaxFunctionId"
        },
        {
            "title": "Array hand made min & max ",
            "subtitle": "A way to find the lowest number is to use a home made method. ",
            "paragraph":"This function loops through an array comparing each value with the lowest value found. </br> The array is : [40, 100, 1, 5, 25, 10].",
            "hiddenInput": "true",
            "inputValueId": "arrMethodsHandMadeMinMaxValueId",
            "onclickFonctionToCall": "arrMethodsHandMadeMinMax",
            "outputResultId": "arrMethodsHandMadeMinMaxIdResult",
            "idToMarkCodeArea": "arrMethodsHandMadeMinMaxFunctionId"
        },
        {
            "title": "Array Sorting Object Arrays ",
            "subtitle": "Even if objects have properties of different data types, the sort() method can be used to sort the array.",
            "paragraph":"The solution is to write a compare function to compare the property values:",
            "hiddenInput": "true",
            "inputValueId": "arrMethodsSortObjectValueId",
            "onclickFonctionToCall": "arrMethodsSortObject",
            "outputResultId": "arrMethodsSortObjectIdResult",
            "idToMarkCodeArea": "arrMethodsSortObjectFunctionId"
        }
    ],
    "arrayIterationMethods": [
        {
            "title": "Array forEach",
            "subtitle": "The forEach() method calls a function (a callback function) once for each array element.",
            "paragraph":"The array : [27, 28, 30, 40, 42, 35, 30] . </br> Good to know: this function can take 3 argument(value, index, array)).",
            "hiddenInput": "true",
            "inputValueId": "arrForEachValueId",
            "onclickFonctionToCall": "arrForEach",
            "outputResultId": "arrForEachIdResult",
            "idToMarkCodeArea": "arrForEachFunctionId"
        },
        {
            "title": "Array Map",
            "subtitle": "The map methods create a new array and do not change the original one. ",
            "paragraph":"Map don't execute the function or array element without value. </br> The array : [45, 4, 9, 16, 25] .",
            "hiddenInput": "true",
            "inputValueId": "arrMapValueId",
            "onclickFonctionToCall": "arrMap",
            "outputResultId": "arrMapIdResult",
            "idToMarkCodeArea": "arrMapFunctionId"
        },
        {
            "title": "Array flatMap",
            "subtitle": " Same as Map but disimbricates at one-level array.   ",
            "paragraph":"If nested array, it need to have the same level of nested for every element( can be done in the callback function). </br> The array : [45, 4, [9, 16], 25] .",
            "inputValueId": "arrflatMapValueId",
            "onclickFonctionToCall": "arrflatMap",
            "outputResultId": "arrflatMapIdResult",
            "idToMarkCodeArea": "arrflatMapFunctionId"
        },
        {
            "title": "Array fliter",
            "subtitle": "The filter() method creates a new array with array elements that pass a test.",
            "paragraph":"This example creates a new array from elements with a value larger than the element you type in. </br> The array : [45, 4, 9, 16, 25] .</br> Good to know: the callback function can take 3 argument(value, index, array)).",
            "inputValueId": "arrFilterValueId",
            "onclickFonctionToCall": "arrFilter",
            "outputResultId": "arrFilterIdResult",
            "idToMarkCodeArea": "arrFilterFunctionId"
        },
        {
            "title": "Array Reduce",
            "subtitle": "They run a function on each element of the array to poduce a single value. </br> And can accept a inital value at argument ont the callback function.",
            "paragraph":" It work to left to right, do not affect the original array. </br> The array  : [45, 4, 9, 16, 25] .</br> Good to know: the callback function can take 4 argument(total (the initial value) value, index, array itself)).",
            "hiddenInput": "true",
            "inputValueId": "arrReduceValueId",
            "onclickFonctionToCall": "arrReduce",
            "outputResultId": "arrReduceIdResult",
            "idToMarkCodeArea": "arrReduceFunctionId"
        },
        {
            "title": "Array Reduce Right",
            "subtitle": "They run a function on each element of the array to poduce a single value. </br> And can accept a inital value at argument ont the callback function.",
            "paragraph":" It work to right to left, do not affect the original array. </br> The array  : [45, 4, 9, 16, 25] .</br> Good to know: the callback function can take 4 argument(total (the initial value) value, index, array itself)).",
            "hiddenInput": "true",
            "inputValueId": "arrReduceRightValueId",
            "onclickFonctionToCall": "arrReduceRight",
            "outputResultId": "arrReduceRightIdResult",
            "idToMarkCodeArea": "arrReduceRightFunctionId"
        },
        {
            "title": "Array Every",
            "subtitle": "The every() method checks if all array values pass a test, the is ont the callback function.",
            "paragraph":"It will test the number you type and check whether all the elements are smaller. </br> The array  : [45, 4, 9, 16, 25] .</br> Good to know: the callback function can take 3 argument( value, index, array itself).",
            "hiddenInput": "true",
            "inputValueId": "arrEveryValueId",
            "onclickFonctionToCall": "arrEvery",
            "outputResultId": "arrEveryIdResult",
            "idToMarkCodeArea": "arrEveryFunctionId"
        }
    ]
}